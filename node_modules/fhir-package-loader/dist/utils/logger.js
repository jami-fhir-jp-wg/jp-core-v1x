"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapLogger = exports.ErrorsAndWarnings = exports.logger = void 0;
const winston_1 = require("winston");
const chalk_1 = __importDefault(require("chalk"));
const { combine, printf } = winston_1.format;
const printer = printf(info => {
    let level;
    switch (info.level) {
        case 'info':
            level = chalk_1.default.whiteBright.bgGreen(`${info.level} `);
            break;
        case 'warn':
            level = chalk_1.default.whiteBright.bgRgb(179, 98, 0)(`${info.level} `);
            break;
        case 'error':
            level = chalk_1.default.whiteBright.bgRed(`${info.level}`);
            break;
        case 'debug':
            level = chalk_1.default.whiteBright.bgBlue(`${info.level}`);
            break;
        default:
            break;
    }
    return `${level} ${info.message}`;
});
exports.logger = (0, winston_1.createLogger)({
    format: combine(printer),
    transports: [new winston_1.transports.Console()]
});
class ErrorsAndWarnings {
    constructor() {
        this.errors = [];
        this.warnings = [];
    }
    reset() {
        this.errors = [];
        this.warnings = [];
    }
}
exports.ErrorsAndWarnings = ErrorsAndWarnings;
const wrapLogger = (log = () => { }, errorsAndWarnings) => {
    return (level, message) => {
        if (level === 'error') {
            errorsAndWarnings.errors.push(message);
        }
        else if (level === 'warn') {
            errorsAndWarnings.warnings.push(message);
        }
        log(level, message);
    };
};
exports.wrapLogger = wrapLogger;
//# sourceMappingURL=logger.js.map