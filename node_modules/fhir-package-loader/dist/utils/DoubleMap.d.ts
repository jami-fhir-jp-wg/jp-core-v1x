/**
 * The DoubleMap is a Map that contains both forward and reverse mappings between keys and values.
 * This allows the DoubleMap to easily provide a list of unique values,
 * because each value in the internal forwardMap will be a key in the reverseMap.
 * The reported size of a DoubleMap is the number of unique values,
 * which is the number of keys in the reverseMap.
 *
 * Note that because DoubleMap.values() returns the keys from reverseMap,
 * it may contain fewer elements than the other functions: keys(), entries(), forEach(), and the for-of iterator.
 */
export declare class DoubleMap<K, V> implements Map<K, V> {
    private forwardMap;
    private reverseMap;
    constructor();
    set(key: K, value: V): this;
    delete(key: K): boolean;
    get(key: K): V;
    get size(): number;
    clear(): void;
    forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void;
    has(key: K): boolean;
    [Symbol.iterator](): IterableIterator<[K, V]>;
    entries(): IterableIterator<[K, V]>;
    keys(): IterableIterator<K>;
    values(): IterableIterator<V>;
    [Symbol.toStringTag]: string;
}
