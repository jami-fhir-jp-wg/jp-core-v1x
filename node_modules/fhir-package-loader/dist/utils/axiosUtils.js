"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.axiosGet = void 0;
const axios_1 = __importDefault(require("axios"));
const https_proxy_agent_1 = require("https-proxy-agent");
/**
 * This function is called to better handle axios.get calls with logic that allows
 * the use of proxies. Not needed in tests unless specifically testing with proxies.
 * Check https://github.com/axios/axios/issues/3459#issuecomment-766171276 for more info.
 * @param url {string} - string representation of url to get
 * @param responseType {any} - optional parameter to change the data type needed from get
 * (ex. arraybuffer). In default it returns JSON
 */
function axiosGet(url, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const httpsProxy = process.env.HTTPS_PROXY;
        const axiosOptions = options !== null && options !== void 0 ? options : {};
        if (httpsProxy) {
            // https://github.com/axios/axios/issues/3459
            axiosOptions.httpsAgent = new https_proxy_agent_1.HttpsProxyAgent(httpsProxy);
            axiosOptions.proxy = false;
        }
        if (Object.keys(axiosOptions).length > 0) {
            return yield axios_1.default.get(url, axiosOptions);
        }
        else {
            return yield axios_1.default.get(url);
        }
    });
}
exports.axiosGet = axiosGet;
//# sourceMappingURL=axiosUtils.js.map