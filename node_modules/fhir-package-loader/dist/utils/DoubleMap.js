"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DoubleMap = void 0;
/**
 * The DoubleMap is a Map that contains both forward and reverse mappings between keys and values.
 * This allows the DoubleMap to easily provide a list of unique values,
 * because each value in the internal forwardMap will be a key in the reverseMap.
 * The reported size of a DoubleMap is the number of unique values,
 * which is the number of keys in the reverseMap.
 *
 * Note that because DoubleMap.values() returns the keys from reverseMap,
 * it may contain fewer elements than the other functions: keys(), entries(), forEach(), and the for-of iterator.
 */
class DoubleMap {
    constructor() {
        this.forwardMap = new Map();
        this.reverseMap = new Map();
    }
    set(key, value) {
        if (this.forwardMap.get(key) === value) {
            return this;
        }
        this.delete(key);
        this.forwardMap.set(key, value);
        if (this.reverseMap.has(value)) {
            this.reverseMap.get(value).add(key);
        }
        else {
            this.reverseMap.set(value, new Set([key]));
        }
        return this;
    }
    delete(key) {
        if (this.forwardMap.has(key)) {
            const currentValue = this.forwardMap.get(key);
            const currentKeys = this.reverseMap.get(currentValue);
            currentKeys.delete(key);
            if (currentKeys.size === 0) {
                this.reverseMap.delete(currentValue);
            }
            this.forwardMap.delete(key);
            return true;
        }
        else {
            return false;
        }
    }
    get(key) {
        return this.forwardMap.get(key);
    }
    get size() {
        return this.reverseMap.size;
    }
    clear() {
        this.forwardMap.clear();
        this.reverseMap.clear();
    }
    forEach(callbackfn, thisArg) {
        this.forwardMap.forEach(callbackfn, thisArg);
    }
    has(key) {
        return this.forwardMap.has(key);
    }
    [Symbol.iterator]() {
        return this.entries();
    }
    entries() {
        return this.forwardMap.entries();
    }
    keys() {
        return this.forwardMap.keys();
    }
    values() {
        return this.reverseMap.keys();
    }
}
exports.DoubleMap = DoubleMap;
Symbol.toStringTag;
//# sourceMappingURL=DoubleMap.js.map