import { FHIRDefinitions } from './FHIRDefinitions';
import { LogFunction } from './utils';
/**
 * Loads multiple dependencies from a directory (the user FHIR cache or a specified directory) or from online
 * @param {string[]} fhirPackages - An array of FHIR packages to download and load definitions from (format: packageId#version)
 * @param {string} [cachePath=path.join(os.homedir(), '.fhir', 'packages')] - Path to look for the package and download to if not already present. Defaults to local FHIR cache.
 * @param {LogFunction} [log=() => {}] - A function for logging. Defaults to no-op.
 * @returns {Promise<FHIRDefinitions>} the loaded FHIRDefinitions
 */
export declare function loadDependencies(fhirPackages: string[], cachePath?: string, log?: LogFunction): Promise<FHIRDefinitions>;
/**
 * Downloads a dependency from a directory (the user FHIR cache or a specified directory) or from online.
 * The definitions from the package are added to their own FHIRDefinitions instance, which is then added to
 * the provided FHIRDefs childDefs. If the provided FHIRDefs does not yet have any children, a wrapper FHIRDefinitions
 * instance is created and both the original packages and the new package are added to childDefs.
 * @param {string} packageName - The name of the package to load
 * @param {string} version - The version of the package to load
 * @param {FHIRDefinitions} FHIRDefs - The FHIRDefinitions to load the dependencies into
 * @param {string} [cachePath=path.join(os.homedir(), '.fhir', 'packages')] - The path to load the package into (default: user FHIR cache)
 * @returns {Promise<FHIRDefinitions>} the loaded FHIRDefs
 * @throws {PackageLoadError} when the desired package can't be loaded
 */
export declare function loadDependency(packageName: string, version: string, FHIRDefs: FHIRDefinitions, cachePath?: string, log?: LogFunction): Promise<FHIRDefinitions>;
/**
 * Downloads a dependency from a directory (the user FHIR cache or a specified directory) or from online
 * and then loads it into the FHIRDefinitions class provided
 * Note: You likely want to use loadDependency, which adds the package to its own FHIRDefinitions class instance
 * before appending that package to the provided FHIRDefinitions.childDefs array. This maintains the same structure
 * that is created with loadDependencies.
 * @param {string} packageName - The name of the package to load
 * @param {string} version - The version of the package to load
 * @param {FHIRDefinitions} FHIRDefs - The FHIRDefinitions to load the dependencies into
 * @param {string} [cachePath=path.join(os.homedir(), '.fhir', 'packages')] - The path to load the package into (default: user FHIR cache)
 * @returns {Promise<FHIRDefinitions>} the loaded FHIRDefs
 * @throws {PackageLoadError} when the desired package can't be loaded
 */
export declare function mergeDependency(packageName: string, version: string, FHIRDefs: FHIRDefinitions, cachePath?: string, log?: LogFunction): Promise<FHIRDefinitions>;
/**
 * This function takes a package which contains contents at the same level as the "package" folder, and nests
 * all that content within the "package" folder.
 *
 * A package should have the format described here https://confluence.hl7.org/pages/viewpage.action?pageId=35718629#NPMPackageSpecification-Format
 * in which all contents are within the "package" folder. Some packages (ex US Core 3.1.0) have an incorrect format in which folders
 * are not sub-folders of "package", but are instead at the same level. The IG Publisher fixes these packages as described
 * https://chat.fhir.org/#narrow/stream/215610-shorthand/topic/dev.20dependencies, so we should as well.
 *
 * @param {string} packageDirectory - The directory containing the package
 */
export declare function cleanCachedPackage(packageDirectory: string): void;
/**
 * Locates the targetPackage within the cachePath and loads the set of JSON files into FHIRDefs
 * @param {string} cachePath - The path to the directory containing cached packages
 * @param {string} targetPackage - The name of the package we are trying to load
 * @param {FHIRDefinitions} FHIRDefs - The FHIRDefinitions object to load defs into
 * @returns {string} the name of the loaded package if successful
 */
export declare function loadFromPath(cachePath: string, targetPackage: string, FHIRDefs: FHIRDefinitions): string;
export declare function lookUpLatestVersion(packageName: string, log?: LogFunction): Promise<string>;
export declare function lookUpLatestPatchVersion(packageName: string, version: string, log?: LogFunction): Promise<string>;
