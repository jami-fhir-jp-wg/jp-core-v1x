"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Package = void 0;
const common_1 = require("../fhirtypes/common");
const fhirtypes_1 = require("../fhirtypes");
const Fishable_1 = require("../utils/Fishable");
class Package {
    constructor(config) {
        this.config = config;
        this.profiles = [];
        this.extensions = [];
        this.logicals = [];
        this.resources = [];
        this.instances = [];
        this.valueSets = [];
        this.codeSystems = [];
        this.fshMap = new Map();
    }
    fish(item, ...types) {
        var _a;
        // No types passed in means to search ALL supported types
        if (types.length === 0) {
            types = [
                Fishable_1.Type.Profile,
                Fishable_1.Type.Extension,
                Fishable_1.Type.Logical,
                Fishable_1.Type.Resource,
                Fishable_1.Type.ValueSet,
                Fishable_1.Type.CodeSystem,
                Fishable_1.Type.Instance
            ];
        }
        // version needs to be checked separately from the base
        const [base, ...versionParts] = (_a = item === null || item === void 0 ? void 0 : item.split('|')) !== null && _a !== void 0 ? _a : ['', ''];
        const version = versionParts.join('|') || null;
        for (const type of types) {
            let def;
            switch (type) {
                case Fishable_1.Type.Profile:
                    def = this.profiles.find(p => (p.id === base || p.name === base || p.url === base) &&
                        (version == null || p.version === version));
                    if (!def) {
                        def = this.instances.find(i => i._instanceMeta.usage === 'Definition' &&
                            i.resourceType === 'StructureDefinition' &&
                            i.derivation === 'constraint' &&
                            i.type !== 'Extension' &&
                            (i.id === base || i._instanceMeta.name === base || i.url === base) &&
                            (version == null || i.version === version));
                    }
                    break;
                case Fishable_1.Type.Extension:
                    def = this.extensions.find(e => (e.id === base || e.name === base || e.url === base) &&
                        (version == null || e.version === version));
                    if (!def) {
                        def = this.instances.find(i => i._instanceMeta.usage === 'Definition' &&
                            i.resourceType === 'StructureDefinition' &&
                            i.derivation === 'constraint' &&
                            i.type === 'Extension' &&
                            (i.id === base || i._instanceMeta.name === base || i.url === base) &&
                            (version == null || i.version === version));
                    }
                    break;
                case Fishable_1.Type.Logical:
                    def = this.logicals.find(l => (l.id === base || l.name === base || l.url === base) &&
                        (version == null || l.version === version));
                    if (!def) {
                        def = this.instances.find(i => i._instanceMeta.usage === 'Definition' &&
                            i.resourceType === 'StructureDefinition' &&
                            i.derivation === 'specialization' &&
                            i.kind === 'logical' &&
                            (i.id === base || i._instanceMeta.name === base || i.url === base) &&
                            (version == null || i.version === version));
                    }
                    break;
                case Fishable_1.Type.Resource:
                    def = this.resources.find(r => (r.id === base || r.name === base || r.url === base) &&
                        (version == null || r.version === version));
                    if (!def) {
                        def = this.instances.find(i => i._instanceMeta.usage === 'Definition' &&
                            i.resourceType === 'StructureDefinition' &&
                            i.derivation === 'specialization' &&
                            i.kind === 'resource' &&
                            (i.id === base || i._instanceMeta.name === base || i.url === base) &&
                            (version == null || i.version === version));
                    }
                    break;
                case Fishable_1.Type.ValueSet:
                    def = this.valueSets.find(vs => (vs.id === base || vs.name === base || vs.url === base) &&
                        (version == null || vs.version === version));
                    if (!def) {
                        def = this.instances.find(i => i._instanceMeta.usage === 'Definition' &&
                            i.resourceType === 'ValueSet' &&
                            (i.id === base || i._instanceMeta.name === base || i.url === base) &&
                            (version == null || i.version === version));
                    }
                    break;
                case Fishable_1.Type.CodeSystem:
                    def = this.codeSystems.find(cs => (cs.id === base || cs.name === base || cs.url === base) &&
                        (version == null || cs.version === version));
                    if (!def) {
                        def = this.instances.find(i => i._instanceMeta.usage === 'Definition' &&
                            i.resourceType === 'CodeSystem' &&
                            (i.id === base || i._instanceMeta.name === base || i.url === base) &&
                            (version == null || i.version === version));
                    }
                    break;
                case Fishable_1.Type.Instance:
                    def = this.instances.find(i => (i.id === base || i._instanceMeta.name === base) &&
                        (version == null || i.version === version));
                    break;
                case Fishable_1.Type.Type: // Package doesn't currently support types
                default:
                    break;
            }
            if (def) {
                return def;
            }
        }
    }
    fishForFHIR(item, ...types) {
        var _a;
        return (_a = this.fish(item, ...types)) === null || _a === void 0 ? void 0 : _a.toJSON();
    }
    fishForMetadata(item, ...types) {
        var _a, _b, _c, _d;
        const result = this.fish(item, ...types);
        if (result) {
            const metadata = {
                id: result.id,
                name: result instanceof fhirtypes_1.InstanceDefinition ? result._instanceMeta.name : result.name,
                instanceUsage: result instanceof fhirtypes_1.InstanceDefinition ? result._instanceMeta.usage : undefined,
                url: result.url,
                version: result.version,
                resourceType: result.resourceType
            };
            if (result instanceof fhirtypes_1.StructureDefinition) {
                metadata.sdType = result.type;
                metadata.parent = result.baseDefinition;
                const imposeProfiles = (0, common_1.findImposeProfiles)(result);
                if (imposeProfiles) {
                    metadata.imposeProfiles = imposeProfiles;
                }
                if (result.kind === 'logical') {
                    metadata.canBeTarget =
                        (_b = (_a = result.extension) === null || _a === void 0 ? void 0 : _a.some(ext => {
                            return (((ext === null || ext === void 0 ? void 0 : ext.url) === common_1.TYPE_CHARACTERISTICS_EXTENSION &&
                                (ext === null || ext === void 0 ? void 0 : ext.valueCode) === 'can-be-target') ||
                                ((ext === null || ext === void 0 ? void 0 : ext.url) === common_1.LOGICAL_TARGET_EXTENSION && (ext === null || ext === void 0 ? void 0 : ext.valueBoolean) === true));
                        })) !== null && _b !== void 0 ? _b : false;
                    // if the export is still in progress, there may be unprocessed rules that make this a valid reference target
                    // return undefined to force the metadata to come from the tank
                    if (metadata.canBeTarget === false && result.inProgress) {
                        return undefined;
                    }
                    metadata.canBind =
                        (_d = (_c = result.extension) === null || _c === void 0 ? void 0 : _c.some(ext => (ext === null || ext === void 0 ? void 0 : ext.url) === common_1.TYPE_CHARACTERISTICS_EXTENSION && (ext === null || ext === void 0 ? void 0 : ext.valueCode) === 'can-bind')) !== null && _d !== void 0 ? _d : false;
                    // if the export is still in progress, there may be unprocessed rules that make this a valid bindable type
                    // return undefined to force the metadata to come from the tank
                    if (metadata.canBeTarget === false && result.inProgress) {
                        return undefined;
                    }
                }
            }
            return metadata;
        }
        else if (
        // If nothing is returned, perhaps the Package itself is being referenced
        item != null &&
            (item === this.config.packageId || item === this.config.name || item === this.config.id)) {
            const metadata = {
                id: this.config.packageId || this.config.id,
                name: this.config.name,
                url: this.config.url ||
                    `${this.config.canonical}/ImplementationGuide/${this.config.packageId || this.config.id}`,
                version: this.config.version,
                resourceType: 'ImplementationGuide'
            };
            return metadata;
        }
    }
    // Resets all the definition arrays to be zero-length. This is useful for re-using a package during testing.
    clearAllDefinitions() {
        this.profiles.length = 0;
        this.extensions.length = 0;
        this.logicals.length = 0;
        this.resources.length = 0;
        this.instances.length = 0;
        this.valueSets.length = 0;
        this.codeSystems.length = 0;
    }
}
exports.Package = Package;
//# sourceMappingURL=Package.js.map