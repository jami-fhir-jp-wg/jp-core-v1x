"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logMessage = exports.errorsAndWarnings = exports.ErrorsAndWarnings = exports.stats = exports.setIgnoredWarnings = exports.logger = void 0;
exports.switchToSecretLogger = switchToSecretLogger;
exports.restoreMainLogger = restoreMainLogger;
const winston_1 = require("winston");
const chalk_1 = __importDefault(require("chalk"));
const cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
const { combine, printf } = winston_1.format;
const withLocation = (0, winston_1.format)(info => {
    if (info.file) {
        info.message += `\n  File: ${info.file}`;
        delete info.file;
    }
    if (info.location) {
        info.message += `\n  Line: ${info.location.startLine}`;
        if (info.location.endLine !== info.location.startLine) {
            info.message += ` - ${info.location.endLine}`;
        }
        delete info.location;
    }
    if (info.appliedFile) {
        info.message += `\n  Applied in File: ${info.appliedFile}`;
        delete info.appliedFile;
    }
    if (info.appliedLocation) {
        info.message += `\n  Applied on Line: ${info.appliedLocation.startLine}`;
        if (info.appliedLocation.endLine !== info.appliedLocation.startLine) {
            info.message += ` - ${info.appliedLocation.endLine}`;
        }
        delete info.appliedLocation;
    }
    return info;
});
const ignoreWarnings = (0, winston_1.format)(info => {
    // Only warnings can be ignored
    if (info.level !== 'warn') {
        return info;
    }
    const shouldIgnore = ignoredWarnings === null || ignoredWarnings === void 0 ? void 0 : ignoredWarnings.some(m => {
        return typeof m === 'string' ? m === info.message : m.test(info.message);
    });
    return shouldIgnore ? false : info;
});
const incrementCounts = (0, winston_1.format)(info => {
    switch (info.level) {
        case 'info':
            exports.stats.numInfo++;
            break;
        case 'warn':
            exports.stats.numWarn++;
            break;
        case 'error':
            exports.stats.numError++;
            break;
        case 'debug':
            exports.stats.numDebug++;
            break;
        default:
            break;
    }
    return info;
});
const trackErrorsAndWarnings = (0, winston_1.format)(info => {
    if (!exports.errorsAndWarnings.shouldTrack) {
        return info;
    }
    if (info.level === 'error') {
        exports.errorsAndWarnings.errors.push({
            message: info.message,
            location: info.location,
            input: info.file
        });
    }
    else if (info.level === 'warn') {
        exports.errorsAndWarnings.warnings.push({
            message: info.message,
            location: info.location,
            input: info.file
        });
    }
    return info;
});
const printer = printf(info => {
    let level;
    switch (info.level) {
        case 'info':
            level = chalk_1.default.whiteBright.bgGreen(`${info.level} `);
            break;
        case 'warn':
            // (179, 98, 0) = dark dark orange
            level = chalk_1.default.whiteBright.bgRgb(179, 98, 0)(`${info.level} `);
            break;
        case 'error':
            level = chalk_1.default.whiteBright.bgRed(`${info.level}`);
            break;
        case 'debug':
            level = chalk_1.default.whiteBright.bgBlue(`${info.level}`);
            break;
        default:
            break;
    }
    return `${level} ${info.message}`;
});
exports.logger = (0, winston_1.createLogger)({
    format: combine(ignoreWarnings(), incrementCounts(), trackErrorsAndWarnings(), withLocation(), printer),
    transports: [new winston_1.transports.Console()]
});
let ignoredWarnings;
const setIgnoredWarnings = (messages) => {
    ignoredWarnings = messages
        .split(/\r?\n/)
        .map(m => m.trim())
        .filter(m => !m.startsWith('#'))
        .map(m => {
        if (m.startsWith('/') && m.endsWith('/')) {
            return new RegExp(m.slice(1, -1));
        }
        else {
            return m;
        }
    });
};
exports.setIgnoredWarnings = setIgnoredWarnings;
class LoggerStats {
    constructor() {
        this.numInfo = 0;
        this.numWarn = 0;
        this.numError = 0;
        this.numDebug = 0;
    }
    reset() {
        this.numInfo = 0;
        this.numWarn = 0;
        this.numError = 0;
        this.numDebug = 0;
    }
}
exports.stats = new LoggerStats();
class ErrorsAndWarnings {
    constructor() {
        this.errors = [];
        this.warnings = [];
        this.shouldTrack = false;
    }
    reset() {
        this.errors = [];
        this.warnings = [];
        this.shouldTrack = false;
    }
}
exports.ErrorsAndWarnings = ErrorsAndWarnings;
exports.errorsAndWarnings = new ErrorsAndWarnings();
const logMessage = (level, message) => {
    exports.logger.log(level, message);
};
exports.logMessage = logMessage;
function switchToSecretLogger() {
    // by setting the logger level to the highest level possible,
    // console output is suppressed, while still calling all the functions
    // defined in the logger's format.
    const oldLevel = exports.logger.level;
    exports.logger.level = 'emerg';
    const oldErrorsAndWarnings = (0, cloneDeep_1.default)(exports.errorsAndWarnings);
    exports.errorsAndWarnings.reset();
    exports.errorsAndWarnings.shouldTrack = true;
    const oldStats = (0, cloneDeep_1.default)(exports.stats);
    exports.stats.reset();
    return { level: oldLevel, errorsAndWarnings: oldErrorsAndWarnings, stats: oldStats };
}
function restoreMainLogger(loggerDataToRestore) {
    exports.logger.level = loggerDataToRestore.level;
    const secretErrorsAndWarnings = (0, cloneDeep_1.default)(exports.errorsAndWarnings);
    exports.errorsAndWarnings.reset();
    exports.errorsAndWarnings.errors = loggerDataToRestore.errorsAndWarnings.errors;
    exports.errorsAndWarnings.warnings = loggerDataToRestore.errorsAndWarnings.warnings;
    exports.errorsAndWarnings.shouldTrack = loggerDataToRestore.errorsAndWarnings.shouldTrack;
    exports.stats.numInfo = loggerDataToRestore.stats.numInfo;
    exports.stats.numWarn = loggerDataToRestore.stats.numWarn;
    exports.stats.numError = loggerDataToRestore.stats.numError;
    exports.stats.numDebug = loggerDataToRestore.stats.numDebug;
    return secretErrorsAndWarnings;
}
//# sourceMappingURL=FSHLogger.js.map