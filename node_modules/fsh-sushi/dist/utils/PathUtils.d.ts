import { InstanceDefinition, PathPart } from '../fhirtypes';
import { CaretValueRule, Rule } from '../fshtypes/rules';
/**
 * Parses a FSH Path into a more easily usable form
 * @param {string} fshPath - A syntactically valid path in FSH
 * @returns {PathPart[]} an array of PathParts that is easier to work with
 */
export declare function parseFSHPath(fshPath: string): PathPart[];
/**
 * Assembles a PathPart array back to its original form
 * @param {PathPart[]} pathParts - An array of pathParts
 * @returns {string} path - The path corresponding to those pathParts
 */
export declare function assembleFSHPath(pathParts: PathPart[]): string;
/**
 * Replaces soft indexes in rule paths with corresponding numbers
 * @param {Rule[]} rules - An array of Rules
 */
export declare function resolveSoftIndexing(rules: Array<Rule | CaretValueRule>, strict?: boolean): void;
/**
 * Given an id or path, collect all of the values at that path in a flattened array. This works
 * similar to FHIRPath path navigation, but has a few tweaks for our specific use case.
 */
export declare function collectValuesAtElementIdOrPath(idOrPath: string, object: InstanceDefinition): {
    values: InstanceDefinition[];
    ignoredSliceRequirements: string[];
};
