import { UsageContext, ImplementationGuideDefinitionTemplate, Meta, Narrative, ImplementationGuideDefinitionResource, ImplementationGuideStatus, ContactPoint, ContactDetail, ImplementationGuideDefinitionPage, ImplementationGuideDefinitionPageGeneration, Quantity, ImplementationGuide, ImplementationGuideDependsOn, ImplementationGuideGlobal, ImplementationGuideDefinitionGrouping, Reference, Extension, Identifier } from '../fhirtypes';
/**
 * YAMLConfiguration follows the proposed configuration format for FSH and incorporates aspects
 * of the ImplementationGuide, ig.ini, package.json, package-list.json, and menu.xml formats.
 *
 * This format is intended to be represented using YAML but is transformed into JSON for our use.
 *
 * @see {@link http://hl7.org/fhir/R4/implementationguide.html}
 * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#igroot}
 * @see {@link https://confluence.hl7.org/display/FHIR/NPM+Package+Specification}
 * @see {@link https://confluence.hl7.org/pages/viewpage.action?pageId=66928420#FHIRIGPackageListdoco-PublicationObject}
 * @see {@link https://github.com/FHIR/sample-ig/blob/master/input/includes/menu.xml}
 */
export type YAMLConfiguration = {
    canonical: string;
    id: ImplementationGuide['id'];
    meta?: YAMLConfigurationMeta;
    implicitRules?: ImplementationGuide['implicitRules'];
    language?: ImplementationGuide['language'];
    text?: YAMLConfigurationNarrative;
    contained?: ImplementationGuide['contained'];
    extension?: ImplementationGuide['extension'];
    modifierExtension?: ImplementationGuide['modifierExtension'];
    url?: ImplementationGuide['url'];
    version: ImplementationGuide['version'] | number;
    name: ImplementationGuide['name'];
    title?: ImplementationGuide['title'];
    status: YAMLConfigurationStatus;
    experimental?: ImplementationGuide['experimental'];
    date?: ImplementationGuide['date'] | number;
    publisher?: YAMLConfigurationPublisher | YAMLConfigurationPublisher[];
    contact?: YAMLConfigurationContactDetail | YAMLConfigurationContactDetail[];
    description?: ImplementationGuide['description'];
    useContext?: YAMLConfigurationUsageContext | YAMLConfigurationUsageContext[];
    jurisdiction?: YAMLConfigurationJurisdiction | YAMLConfigurationJurisdiction[];
    copyright?: ImplementationGuide['copyright'];
    copyrightLabel?: ImplementationGuide['copyrightLabel'];
    versionAlgorithmString?: ImplementationGuide['versionAlgorithmString'];
    versionAlgorithmCoding?: ImplementationGuide['versionAlgorithmCoding'] | string;
    packageId?: ImplementationGuide['packageId'];
    license?: ImplementationGuide['license'];
    fhirVersion: ImplementationGuide['fhirVersion'][0] | ImplementationGuide['fhirVersion'];
    dependencies?: YAMLConfigurationDependencyMap;
    global?: YAMLConfigurationGlobalMap;
    definition?: YAMLConfigurationDefinition;
    groups?: YAMLConfigurationGroupMap;
    resources?: YAMLConfigurationResourceMap;
    pages?: YAMLConfigurationPageTree;
    parameters?: YAMLConfigurationParameterMap;
    templates?: ImplementationGuideDefinitionTemplate | ImplementationGuideDefinitionTemplate[];
    template?: string;
    copyrightYear?: string | number;
    copyrightyear?: string | number;
    releaseLabel?: string;
    releaselabel?: string;
    menu?: YAMLConfigurationMenuTree;
    history?: YAMLConfigurationHistory;
    indexPageContent?: string;
    FSHOnly?: boolean;
    applyExtensionMetadataToRoot?: boolean;
    instanceOptions?: YAMLConfigurationInstanceOptions;
};
export type YAMLConfigurationMeta = {
    versionId?: Meta['versionId'];
    lastUpdated?: Meta['lastUpdated'];
    source?: Meta['source'];
    profile?: Meta['profile'];
    security?: (Meta['security'][0] | string)[];
    tag?: (Meta['tag'][0] | string)[];
};
export type YAMLConfigurationNarrative = {
    status: Narrative['status'] | '#generated' | '#extensions' | '#additional' | '#empty';
    div: Narrative['div'];
};
export type YAMLConfigurationStatus = ImplementationGuideStatus | '#draft' | '#active' | '#retired' | '#unknown';
export type YAMLConfigurationPublisher = {
    name: ImplementationGuide['publisher'];
    url?: ContactPoint['value'];
    email?: ContactPoint['value'];
};
export type YAMLConfigurationContactDetail = {
    name?: ContactDetail['name'];
    telecom?: YAMLConfigurationContactPoint[];
};
export type YAMLConfigurationContactPoint = {
    system?: ContactPoint['system'] | '#phone' | '#fax' | '#email' | '#pager' | '#url' | '#sms' | '#other';
    value?: ContactPoint['value'];
    use?: ContactPoint['use'] | '#home' | '#work' | '#temp' | '#old' | '#mobile';
    rank?: ContactPoint['rank'];
    period?: ContactPoint['period'];
};
export type YAMLConfigurationUsageContext = {
    code: UsageContext['code'] | string;
    valueCodeableConcept?: UsageContext['valueCodeableConcept'] | string;
    valueQuantity?: YAMLConfigurationQuantity | string;
    valueRange?: YAMLConfigurationRange;
    valueReference?: YAMLConfigurationReference;
};
export type YAMLConfigurationQuantity = {
    value?: Quantity['value'];
    comparator?: Quantity['comparator'] | '#<' | '#<=' | '#>=' | '#>';
    unit?: Quantity['unit'];
    system?: Quantity['system'];
    code?: Quantity['code'];
};
export type YAMLConfigurationRange = {
    low?: YAMLConfigurationQuantity | string;
    high?: YAMLConfigurationQuantity | string;
};
export type YAMLConfigurationReference = {
    reference?: Reference['reference'];
    type?: Reference['type'];
    identifier?: YAMLConfigurationIdentifier;
    display?: Reference['display'];
};
export type YAMLConfigurationIdentifier = {
    use?: Identifier['use'] | '#usual' | '#official' | '#temp' | '#old';
    type?: Identifier['type'] | string;
    system?: Identifier['system'];
    value?: Identifier['value'];
    period?: Identifier['period'];
    assigner?: YAMLConfigurationReference;
};
export type YAMLConfigurationJurisdiction = ImplementationGuide['jurisdiction'][0] | string;
export type YAMLConfigurationDependencyMap = {
    [key: string]: ImplementationGuideDependsOn['version'] | number | YAMLConfigurationDependencyDetails;
};
export type YAMLConfigurationDependencyDetails = {
    id: ImplementationGuideDependsOn['id'];
    uri: ImplementationGuideDependsOn['uri'];
    version: ImplementationGuideDependsOn['version'] | number;
    reason?: ImplementationGuideDependsOn['reason'];
    extension?: Extension[];
};
export type YAMLConfigurationGlobalMap = {
    [key: string]: ImplementationGuideGlobal['profile'] | ImplementationGuideGlobal['profile'][];
};
export type YAMLConfigurationDefinition = {
    extension?: Extension[];
};
export type YAMLConfigurationGroupMap = {
    [key: string]: {
        name?: ImplementationGuide['name'];
        description?: ImplementationGuideDefinitionGrouping['description'];
        resources: string[];
    };
};
export type YAMLConfigurationResourceMap = {
    [key: string]: 'omit' | '#omit' | YAMLConfigurationResource;
};
export type YAMLConfigurationResource = {
    reference?: ImplementationGuideDefinitionResource['reference'];
    fhirVersion?: ImplementationGuideDefinitionResource['fhirVersion'] | ImplementationGuideDefinitionResource['fhirVersion'][0];
    name?: ImplementationGuideDefinitionResource['name'];
    description?: ImplementationGuideDefinitionResource['description'];
    exampleBoolean?: ImplementationGuideDefinitionResource['exampleBoolean'];
    exampleCanonical?: ImplementationGuideDefinitionResource['exampleCanonical'];
    isExample?: ImplementationGuideDefinitionResource['isExample'];
    profile?: ImplementationGuideDefinitionResource['profile'] | ImplementationGuideDefinitionResource['profile'][0];
    groupingId?: ImplementationGuideDefinitionResource['groupingId'];
};
export type YAMLConfigurationPageTree = {
    [key: string]: YAMLConfigurationPage;
};
export type YAMLConfigurationPage = null | {
    title?: ImplementationGuideDefinitionPage['title'];
    generation?: ImplementationGuideDefinitionPageGeneration | '#html' | '#markdown' | '#xml' | '#generated';
    extension?: Extension[];
    modifierExtension?: Extension[];
    name?: string;
    sourceUrl?: string;
    sourceString?: string;
    sourceMarkdown?: string;
    [key: string]: YAMLConfigurationPage | string | Extension[];
};
export type YAMLConfigurationParameterMap = {
    [key: string]: string | number | boolean | (string | number | boolean)[];
};
export type YAMLConfigurationMenuTree = {
    [key: string]: string | YAMLConfigurationMenuTree;
};
export type YAMLConfigurationHistory = {
    'package-id'?: string;
    canonical?: string;
    title?: string;
    introduction?: string;
    current: string | YAMLConfigurationHistoryItem;
    [key: string]: string | YAMLConfigurationHistoryItem;
};
export type YAMLConfigurationHistoryItem = {
    date?: string | number;
    desc?: string;
    path: string;
    changes?: string;
    status?: 'ci-build' | '#ci-build' | 'preview' | '#preview' | 'ballot' | '#ballot' | 'trial-use' | '#trial-use' | 'update' | '#update' | 'normative' | '#normative' | 'trial=use+normative' | '#trial=use+normative';
    sequence?: string;
    fhirversion?: string;
    current?: boolean;
};
export type YAMLConfigurationInstanceOptions = {
    setMetaProfile?: 'always' | 'never' | 'inline-only' | 'standalone-only';
    setId?: 'always' | 'standalone-only';
    manualSliceOrdering?: boolean;
};
