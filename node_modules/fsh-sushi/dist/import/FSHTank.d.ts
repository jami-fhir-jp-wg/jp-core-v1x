import { FSHDocument } from './FSHDocument';
import { Profile, Extension, Logical, Resource, Instance, FshValueSet, FshCodeSystem, Invariant, RuleSet, Mapping, Configuration } from '../fshtypes';
import { Type, Metadata, Fishable } from '../utils/Fishable';
export declare class FSHTank implements Fishable {
    readonly docs: FSHDocument[];
    readonly config: Configuration;
    constructor(docs: FSHDocument[], config: Configuration);
    /**
     * Gets all profiles in the tank
     * @returns {Profile[]}
     */
    getAllProfiles(): Profile[];
    /**
     * Gets all extensions in the tank
     * @returns {Extension[]}
     */
    getAllExtensions(): Extension[];
    /**
     * Gets all logical models in the tank
     * @returns {Logical[]}
     */
    getAllLogicals(): Logical[];
    /**
     * Gets all resources in the tank
     * @returns {Resource[]}
     */
    getAllResources(): Resource[];
    /**
     * Gets all instances in the tank
     * @returns {Instance[]}
     */
    getAllInstances(): Instance[];
    /**
     * Gets all structure definitions (i.e., FshStructures) (profiles, extensions,
     * logical models, and resources) in the tank.
     * @returns {(Profile | Extension)[]}
     */
    getAllStructureDefinitions(): (Profile | Extension | Logical | Resource)[];
    /**
     * Gets all value sets in the tank
     * @returns {FshValueSet[]}
     */
    getAllValueSets(): FshValueSet[];
    /**
     * Gets all code systems in the tank
     * @returns {FshCodeSystem[]}
     */
    getAllCodeSystems(): FshCodeSystem[];
    /**
     * Gets all invariants in the tank
     * @returns {Invariant[]}
     */
    getAllInvariants(): Invariant[];
    /**
     * Gets all ruleSets in the tank
     * @returns {RuleSet[]}
     */
    getAllRuleSets(): RuleSet[];
    /**
     * Gets all Mappings in the tank
     * @returns {Mapping[]}
     */
    getAllMappings(): Mapping[];
    /**
     * Finds the alias in the tank, if it exists
     * @param {string} name - The name of the alias we're looking for
     * @returns {string | undefined}
     */
    resolveAlias(name: string): string | undefined;
    fish(item: string, ...types: Type[]): Profile | Extension | Logical | Resource | FshValueSet | FshCodeSystem | Instance | Invariant | RuleSet | Mapping | undefined;
    fishForAppliedRuleSet(item: string): RuleSet | undefined;
    fishForMetadata(item: string, ...types: Type[]): Metadata | undefined;
    fishForFHIR(item: string, ...types: Type[]): any | undefined;
    private hasLogicalCharacteristic;
    private findExtensionValues;
}
