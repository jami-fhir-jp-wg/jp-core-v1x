"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureConfiguration = ensureConfiguration;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const FSHLogger_1 = require("../utils/FSHLogger");
/**
 * Checks for a sushi-config.yaml or sushi-config.yml file. If it finds one, it returns its path,
 * otherwise it returns undefined.
 * @param root - the root path of the FSH Tank
 * @returns {string|undefined} path to the config file or undefined if it couldn't find or create one
 */
function ensureConfiguration(root) {
    const configPath = [
        path_1.default.join(root, 'sushi-config.yaml'),
        path_1.default.join(root, 'sushi-config.yml')
    ].find(fs_extra_1.default.existsSync);
    if (configPath) {
        // The config already exists, so return it
        FSHLogger_1.logger.info(`Using configuration file: ${path_1.default.resolve(configPath)}`);
    }
    const deprecatedConfigPath = [path_1.default.join(root, 'config.yaml'), path_1.default.join(root, 'config.yml')].find(fs_extra_1.default.existsSync);
    if (deprecatedConfigPath) {
        FSHLogger_1.logger.error(`Use of ${path_1.default.basename(deprecatedConfigPath)} is no longer supported. Please rename configuration file to "sushi-config.yaml" in order to use this configuration file.`);
    }
    return configPath; // Return the path to the config or undefined if it wasn't found
}
//# sourceMappingURL=ensureConfigurationFile.js.map