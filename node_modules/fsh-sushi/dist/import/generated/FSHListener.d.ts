export default class FSHListener {
    enterDoc(ctx: any): void;
    exitDoc(ctx: any): void;
    enterEntity(ctx: any): void;
    exitEntity(ctx: any): void;
    enterAlias(ctx: any): void;
    exitAlias(ctx: any): void;
    enterProfile(ctx: any): void;
    exitProfile(ctx: any): void;
    enterExtension(ctx: any): void;
    exitExtension(ctx: any): void;
    enterLogical(ctx: any): void;
    exitLogical(ctx: any): void;
    enterResource(ctx: any): void;
    exitResource(ctx: any): void;
    enterSdMetadata(ctx: any): void;
    exitSdMetadata(ctx: any): void;
    enterSdRule(ctx: any): void;
    exitSdRule(ctx: any): void;
    enterLrRule(ctx: any): void;
    exitLrRule(ctx: any): void;
    enterInstance(ctx: any): void;
    exitInstance(ctx: any): void;
    enterInstanceMetadata(ctx: any): void;
    exitInstanceMetadata(ctx: any): void;
    enterInstanceRule(ctx: any): void;
    exitInstanceRule(ctx: any): void;
    enterInvariant(ctx: any): void;
    exitInvariant(ctx: any): void;
    enterInvariantMetadata(ctx: any): void;
    exitInvariantMetadata(ctx: any): void;
    enterInvariantRule(ctx: any): void;
    exitInvariantRule(ctx: any): void;
    enterValueSet(ctx: any): void;
    exitValueSet(ctx: any): void;
    enterVsMetadata(ctx: any): void;
    exitVsMetadata(ctx: any): void;
    enterVsRule(ctx: any): void;
    exitVsRule(ctx: any): void;
    enterCodeSystem(ctx: any): void;
    exitCodeSystem(ctx: any): void;
    enterCsMetadata(ctx: any): void;
    exitCsMetadata(ctx: any): void;
    enterCsRule(ctx: any): void;
    exitCsRule(ctx: any): void;
    enterRuleSet(ctx: any): void;
    exitRuleSet(ctx: any): void;
    enterRuleSetRule(ctx: any): void;
    exitRuleSetRule(ctx: any): void;
    enterParamRuleSet(ctx: any): void;
    exitParamRuleSet(ctx: any): void;
    enterParamRuleSetRef(ctx: any): void;
    exitParamRuleSetRef(ctx: any): void;
    enterParameter(ctx: any): void;
    exitParameter(ctx: any): void;
    enterLastParameter(ctx: any): void;
    exitLastParameter(ctx: any): void;
    enterParamRuleSetContent(ctx: any): void;
    exitParamRuleSetContent(ctx: any): void;
    enterMapping(ctx: any): void;
    exitMapping(ctx: any): void;
    enterMappingMetadata(ctx: any): void;
    exitMappingMetadata(ctx: any): void;
    enterMappingEntityRule(ctx: any): void;
    exitMappingEntityRule(ctx: any): void;
    enterParent(ctx: any): void;
    exitParent(ctx: any): void;
    enterId(ctx: any): void;
    exitId(ctx: any): void;
    enterTitle(ctx: any): void;
    exitTitle(ctx: any): void;
    enterDescription(ctx: any): void;
    exitDescription(ctx: any): void;
    enterExpression(ctx: any): void;
    exitExpression(ctx: any): void;
    enterXpath(ctx: any): void;
    exitXpath(ctx: any): void;
    enterSeverity(ctx: any): void;
    exitSeverity(ctx: any): void;
    enterInstanceOf(ctx: any): void;
    exitInstanceOf(ctx: any): void;
    enterUsage(ctx: any): void;
    exitUsage(ctx: any): void;
    enterSource(ctx: any): void;
    exitSource(ctx: any): void;
    enterTarget(ctx: any): void;
    exitTarget(ctx: any): void;
    enterContext(ctx: any): void;
    exitContext(ctx: any): void;
    enterContextItem(ctx: any): void;
    exitContextItem(ctx: any): void;
    enterLastContextItem(ctx: any): void;
    exitLastContextItem(ctx: any): void;
    enterCharacteristics(ctx: any): void;
    exitCharacteristics(ctx: any): void;
    enterCardRule(ctx: any): void;
    exitCardRule(ctx: any): void;
    enterFlagRule(ctx: any): void;
    exitFlagRule(ctx: any): void;
    enterValueSetRule(ctx: any): void;
    exitValueSetRule(ctx: any): void;
    enterFixedValueRule(ctx: any): void;
    exitFixedValueRule(ctx: any): void;
    enterContainsRule(ctx: any): void;
    exitContainsRule(ctx: any): void;
    enterOnlyRule(ctx: any): void;
    exitOnlyRule(ctx: any): void;
    enterObeysRule(ctx: any): void;
    exitObeysRule(ctx: any): void;
    enterCaretValueRule(ctx: any): void;
    exitCaretValueRule(ctx: any): void;
    enterCodeCaretValueRule(ctx: any): void;
    exitCodeCaretValueRule(ctx: any): void;
    enterMappingRule(ctx: any): void;
    exitMappingRule(ctx: any): void;
    enterInsertRule(ctx: any): void;
    exitInsertRule(ctx: any): void;
    enterCodeInsertRule(ctx: any): void;
    exitCodeInsertRule(ctx: any): void;
    enterAddCRElementRule(ctx: any): void;
    exitAddCRElementRule(ctx: any): void;
    enterAddElementRule(ctx: any): void;
    exitAddElementRule(ctx: any): void;
    enterPathRule(ctx: any): void;
    exitPathRule(ctx: any): void;
    enterVsComponent(ctx: any): void;
    exitVsComponent(ctx: any): void;
    enterVsConceptComponent(ctx: any): void;
    exitVsConceptComponent(ctx: any): void;
    enterVsFilterComponent(ctx: any): void;
    exitVsFilterComponent(ctx: any): void;
    enterVsComponentFrom(ctx: any): void;
    exitVsComponentFrom(ctx: any): void;
    enterVsFromSystem(ctx: any): void;
    exitVsFromSystem(ctx: any): void;
    enterVsFromValueset(ctx: any): void;
    exitVsFromValueset(ctx: any): void;
    enterVsFilterList(ctx: any): void;
    exitVsFilterList(ctx: any): void;
    enterVsFilterDefinition(ctx: any): void;
    exitVsFilterDefinition(ctx: any): void;
    enterVsFilterOperator(ctx: any): void;
    exitVsFilterOperator(ctx: any): void;
    enterVsFilterValue(ctx: any): void;
    exitVsFilterValue(ctx: any): void;
    enterName(ctx: any): void;
    exitName(ctx: any): void;
    enterPath(ctx: any): void;
    exitPath(ctx: any): void;
    enterCaretPath(ctx: any): void;
    exitCaretPath(ctx: any): void;
    enterFlag(ctx: any): void;
    exitFlag(ctx: any): void;
    enterStrength(ctx: any): void;
    exitStrength(ctx: any): void;
    enterValue(ctx: any): void;
    exitValue(ctx: any): void;
    enterItem(ctx: any): void;
    exitItem(ctx: any): void;
    enterCode(ctx: any): void;
    exitCode(ctx: any): void;
    enterConcept(ctx: any): void;
    exitConcept(ctx: any): void;
    enterQuantity(ctx: any): void;
    exitQuantity(ctx: any): void;
    enterRatio(ctx: any): void;
    exitRatio(ctx: any): void;
    enterReference(ctx: any): void;
    exitReference(ctx: any): void;
    enterReferenceType(ctx: any): void;
    exitReferenceType(ctx: any): void;
    enterCodeableReferenceType(ctx: any): void;
    exitCodeableReferenceType(ctx: any): void;
    enterCanonical(ctx: any): void;
    exitCanonical(ctx: any): void;
    enterRatioPart(ctx: any): void;
    exitRatioPart(ctx: any): void;
    enterBool(ctx: any): void;
    exitBool(ctx: any): void;
    enterTargetType(ctx: any): void;
    exitTargetType(ctx: any): void;
    enterMostAlphaKeywords(ctx: any): void;
    exitMostAlphaKeywords(ctx: any): void;
}
