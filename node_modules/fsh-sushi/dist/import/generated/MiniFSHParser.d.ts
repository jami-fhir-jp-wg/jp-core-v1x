declare class MiniFSHParser extends antlr4.Parser {
    static grammarFileName: string;
    static literalNames: any[];
    static symbolicNames: string[];
    static ruleNames: string[];
    constructor(input: any);
    _interp: any;
    ruleNames: string[];
    literalNames: any[];
    symbolicNames: string[];
    ruleSet(): RuleSetContext;
    someRule(): SomeRuleContext;
    rulePart(): RulePartContext;
}
declare namespace MiniFSHParser {
    export let EOF: number;
    export let STAR: number;
    export let STRING: number;
    export let MULTILINE_STRING: number;
    export let SEQUENCE: number;
    export let WHITESPACE: number;
    export let LINE_COMMENT: number;
    export let RULE_ruleSet: number;
    export let RULE_someRule: number;
    export let RULE_rulePart: number;
    export { RuleSetContext };
    export { SomeRuleContext };
    export { RulePartContext };
}
export default MiniFSHParser;
import antlr4 from 'antlr4';
declare class RuleSetContext extends antlr4.ParserRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    EOF(): antlr4.TerminalNode;
    someRule: (i: any) => any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare class SomeRuleContext extends antlr4.ParserRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    STAR(): antlr4.TerminalNode;
    rulePart: (i: any) => any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare class RulePartContext extends antlr4.ParserRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    SEQUENCE(): antlr4.TerminalNode;
    STRING(): antlr4.TerminalNode;
    MULTILINE_STRING(): antlr4.TerminalNode;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
