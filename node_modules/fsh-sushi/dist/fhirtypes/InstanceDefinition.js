"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceDefinition = void 0;
const sanitize_filename_1 = __importDefault(require("sanitize-filename"));
const lodash_1 = require("lodash");
const common_1 = require("./common");
const mixins_1 = require("./mixins");
const Mixin_1 = require("../utils/Mixin");
/**
 * A class representing a FHIR Instance.
 *
 * The defined properties on InstanceDefinition are relatively simple due to the fact that each FHIR resource will
 * be setting different properties based on their own definitions.
 */
class InstanceDefinition {
    constructor() {
        this._instanceMeta = {};
    }
    /**
     * Get the file name for serializing to disk.
     * @returns {string} the filename
     */
    getFileName() {
        var _a;
        // Logical instances should use Binary type. See: https://fshschool.org/docs/sushi/tips/#instances-of-logical-models
        const type = this._instanceMeta.sdKind === 'logical' ? 'Binary' : this.resourceType;
        return (0, sanitize_filename_1.default)(`${type}-${(_a = this.id) !== null && _a !== void 0 ? _a : this._instanceMeta.name}.json`, {
            replacement: '-'
        });
    }
    toJSON() {
        const orderedKeys = ['resourceType', '_resourceType', 'id', '_id', 'meta', '_meta'].filter(key => this[key] != null);
        // _instanceMeta is only needed for lookup and IG config - not a FHIR property
        const additionalKeys = (0, lodash_1.difference)(Object.keys(this), [...orderedKeys, '_instanceMeta']);
        return (0, common_1.orderedCloneDeep)(this, [...orderedKeys, ...additionalKeys]);
    }
    static fromJSON(json) {
        const instanceDefinition = new InstanceDefinition();
        Object.keys(json).forEach(key => {
            instanceDefinition[key] = json[key];
        });
        // Default the meta name to the id
        if (json.id != null) {
            instanceDefinition._instanceMeta.name = json.id;
        }
        return instanceDefinition;
    }
}
exports.InstanceDefinition = InstanceDefinition;
(0, Mixin_1.applyMixins)(InstanceDefinition, [mixins_1.HasId]);
//# sourceMappingURL=InstanceDefinition.js.map