"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeSystem = void 0;
const sanitize_filename_1 = __importDefault(require("sanitize-filename"));
const mixins_1 = require("./mixins");
const Mixin_1 = require("../utils/Mixin");
const StructureDefinition_1 = require("./StructureDefinition");
const utils_1 = require("../utils");
const common_1 = require("./common");
/**
 * Class representing a FHIR R4 CodeSystem
 * @see {@link https://www.hl7.org/fhir/codesystem.html}
 */
class CodeSystem {
    constructor() {
        this.resourceType = 'CodeSystem';
        this.status = 'draft';
        this.content = 'complete';
    }
    /**
     * Get the Structure Definition for Code System
     * @param {Fishable} fisher - A fishable implementation for finding definitions and metadata
     * @returns {StructureDefinition} the StructureDefinition of Code System
     */
    getOwnStructureDefinition(fisher) {
        return StructureDefinition_1.StructureDefinition.fromJSON(fisher.fishForFHIR('CodeSystem', utils_1.Type.Resource));
    }
    /**
     * Get the file name for serializing to disk.
     * @returns {string} the filename
     */
    getFileName() {
        return (0, sanitize_filename_1.default)(`CodeSystem-${this.id}.json`, { replacement: '-' });
    }
    /**
     * Exports the CodeSystem to a properly formatted FHIR JSON representation.
     * @returns {any} the FHIR JSON representation of the CodeSystem
     */
    toJSON() {
        return {
            ...(0, common_1.orderedCloneDeep)(this)
        };
    }
}
exports.CodeSystem = CodeSystem;
(0, Mixin_1.applyMixins)(CodeSystem, [mixins_1.HasId, mixins_1.HasName]);
//# sourceMappingURL=CodeSystem.js.map