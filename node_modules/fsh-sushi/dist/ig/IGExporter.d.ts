import { Package } from '../export';
import { ImplementationGuideDefinitionPage } from '../fhirtypes';
import { FHIRDefinitions } from '../fhirdefs';
/**
 * The IG Exporter exports the FSH artifacts into a file structure supported by the IG Publisher.
 * This allows a FSH Tank to be built as a FHIR IG.  Currently, template-based IG publishing is
 * still new, so this functionality is subject to change.
 *
 * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/index.html}
 */
export declare class IGExporter {
    private readonly pkg;
    private readonly fhirDefs;
    private readonly inputPath;
    private ig;
    private readonly configPath;
    private readonly config;
    private readonly configName;
    constructor(pkg: Package, fhirDefs: FHIRDefinitions, inputPath: string);
    /**
     * Export the IG structure to the location specified by the outPath argument
     *
     * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#directory-structure}
     * @param outPath {string} - the path to export the IG file structure to
     */
    export(outPath: string): void;
    /**
     * Normalizes FSHy ids and names to the required relative URLs or canonicals
     */
    normalizeResourceReferences(): void;
    /**
     * Initializes the ImplementationGuide JSON w/ data from the configuration YAML
     *
     * @see {@link https://confluence.hl7.org/pages/viewpage.action?pageId=35718629#NPMPackageSpecification-PackageManifestpropertiesforIGs}
     */
    initIG(): void;
    /**
     * Fixes a dependsOn entry by specifying its uri (if not yet specified) and generating an id (if
     * not yet specified). Will also ensure that required properties (uri/version) are available.
     * If it cannot ensure a valid dependsOn entry, it will return undefined.
     * @param dependency - the dependency to fix
     * @param igs - the IGs to search when finding the dependency URI
     * @returns the fixed dependency or null if it can't be fixed
     */
    private fixDependsOn;
    /**
     * Add the index.md file. Creates an index.md based on the "indexPageContent" in sushi-config.yaml.
     * If the user provided an index file, and no "indexPageContent" in sushi-config.yaml is specified,
     * the provided file is used instead. The provided file may be in one of two locations:
     * ./input/pagecontent or ./input/pages
     *
     * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#root.input}
     * @param igPath - the path where the IG is exported to
     */
    addIndex(igPath: string): void;
    addLinkReferences(igPath: string): void;
    /**
     * Adds additional pages beyond index.md that are defined by the user.
     * Only add formats that are supported by the IG template
     * Intro and notes file contents are injected into relevant pages and should not be treated as their own page
     * Three directories are checked for additional page content:
     * pagecontent, pages, and resource-docs
     *
     * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#root.input}
     */
    private addOtherPageContent;
    /**
     * Adds additional pages to the IG based on user configuration.
     * Only pages present in the configuration are added, regardless of available files.
     *
     * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#directory-structure}
     * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#root.input}
     */
    addConfiguredPageContent(): void;
    /**
     * Adds pages to the implementation guide's list of pages.
     * The page configuration is traversed recursively to maintain the configured structure.
     *
     * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#root.input}
     * @param {ImplementationGuideDefinitionPage} page - the current page being added to a list of output pages
     * @param {ImplementationGuideDefinitionPage[]} target - the list of output pages that will receive the current page
     */
    private addConfiguredPage;
    /**
     * Sorts and renames pages based on numeric prefixes.
     * Numeric prefixes are used for applying a sort order, and remain part of the file name.
     *
     * @param {string[]} pages - list of file names with extensions
     * @returns {PageMetadata []} - sorted list of file information objects
     */
    private organizePageContent;
    /**
     * Compares two file names, each of which may be prefixed with a number.
     * If neither file has a prefix, compares the file names alphabetically.
     * If one file has a prefix, that file is before the other.
     * If both have a prefix, compares the prefixes numerically.
     * If the prefixes are equal, resolves the tie by comparing the file names alphabetically.
     *
     * @param {PageMetadata} pageA - metadata for first file
     * @param {PageMetadata} pageB - metadata for second file
     * @returns {number} - positive when file b comes first, negative when file a comes first, zero when the file names are equal.
     */
    private compareIgFilenames;
    /**
     * Adds menu.xml
     * A user can define a menu in sushi-config.yaml or provide one in ./input/includes.
     * If neither is provided, a warning is issued to the user.
     *
     * @param {string} igPath - the path where the IG is exported to
     */
    addMenuXML(igPath: string): void;
    /**
     * Build individual menu item for menu.xml file. An item could contain a submenu
     *
     * @param {ConfigurationMenuItem} item - the menu item to be rendered
     * @param {number} spaces - the base number of spaces to indent
     * @returns {string} - the piece of XML relating to the given menu item
     */
    private buildMenuItem;
    /**
     * Build a submenu for an item for menu.xml.
     *
     * @param item - the menu item with submenu to be rendered
     * @param spaces - the base number of spaces to indent
     * @returns {string} - the piece of XML relating to the submenu
     */
    private buildSubMenu;
    private encodeMenuName;
    /**
     * Add each of the resources from the package to the ImplementationGuide JSON file.
     * Configuration may specify resources to omit.
     *
     * This function has similar operation to addPredefinedResources, and both should be
     * analyzed when making changes to either.
     */
    private addResources;
    private addPackageResource;
    /**
     * Adds any user provided resource files to the ImplementationGuide JSON file.
     * This includes definitions in:
     * capabilities, extensions, models, operations, profiles, resources, vocabulary, examples
     * Based on: https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#root.input
     *
     * NOTE: This only includes files nested in subfolders when specified in the path-resource
     * parameter, which is based on how the IG Publisher works.
     *
     * This function has similar operation to addResources, and both should be
     * analyzed when making changes to either.
     */
    private addPredefinedResources;
    /**
     * Adds resources that are present only in the configuration.
     * If a configured resource is already in the implementation guide,
     * there is no need to add it again.
     */
    private addConfiguredResources;
    /**
     * Sort the IG resources based on the configuration.
     * If all resources are listed in the configuration "resources" section, use that order.
     * Otherwise, if all resources are listed in the configuration "groups" section, use that order.
     * Otherwise, use the name attribute that was created when the resource was added to the IG.
     * A configured resource may lack a name, so use reference.reference as backup.
     */
    private sortResources;
    /**
     * Try to sort resources based on the order in the resource configuration.
     * If this sort is possible, perform it, and return true.
     * Otherwise, return false.
     */
    private trySortResourcesByConfig;
    /**
     * Try to sort resources based on the order in the group configuration.
     * If this sort is possible, perform it, and return true.
     * Otherwise, return false.
     */
    private trySortResourcesByGroup;
    /**
     * Adds or updates a group in the implementation guide.
     *
     * @param {string} id - unique identifier for group
     * @param {string} name - name of the group
     * @param {string} description - optional description of the group
     */
    private addGroup;
    /**
     * Adds groups listed in the configuration to the implementation guide.
     * Updates the groupingId on resources listed as members of a group.
     * Shows errors if a listed resource does not exist, or if there are conflicting
     * configured values for groupingId.
     * Shows a warning if a groupingId is given in resource configuration and
     * that resource is listed in the group with that groupingId.
     */
    private addConfiguredGroups;
    private getMetaExtensionDescription;
    private getMetaExtensionName;
    private normalizeResourceReference;
    /**
     * Writes the in-memory ImplementationGuide JSON to the IG output folder.
     *
     * @param igPath {string} - the path where the IG is exported to
     */
    addImplementationGuide(igPath: string): void;
    /**
     * Logs an error if the no longer supported "template" property is used in sushi-config.yaml.
     */
    checkIgIni(): void;
    /**
     * Generates the contents of an ig.ini file using the information in the configuration.
     *
     * @returns {string} contents of ig.ini file
     */
    generateIgIniString(): string;
    /**
     * Process an existing ig.ini.
     * When one of the required properties is missing, an error is logged but the file is not changed.
     *
     * @param inputIniPath {string} - the path to the input ig.ini file
     */
    processIgIni(inputIniPath: string): void;
    /**
     * Logs an error if the no longer supported "history" property is used in sushi-config.yaml
     */
    checkPackageList(): void;
    updateForR5(): void;
    translateR5PropertiesToR4(): void;
    updatePageNameForR5(page: ImplementationGuideDefinitionPage, configPages: ImplementationGuideDefinitionPage[]): void;
    addPageSourceForR5(page: ImplementationGuideDefinitionPage, configPages: ImplementationGuideDefinitionPage[]): void;
    defaultPageSourceUrlForR5(page: ImplementationGuideDefinitionPage): void;
    addNameUrlAndPageSourceExtensionForR4(page: ImplementationGuideDefinitionPage, configPages: ImplementationGuideDefinitionPage[]): void;
}
