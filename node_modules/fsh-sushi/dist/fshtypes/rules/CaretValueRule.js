"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CaretValueRule = void 0;
const Rule_1 = require("./Rule");
const FshCanonical_1 = require("../FshCanonical");
const FshCode_1 = require("../FshCode");
const FshQuantity_1 = require("../FshQuantity");
const FshRatio_1 = require("../FshRatio");
const FshReference_1 = require("../FshReference");
const common_1 = require("../common");
class CaretValueRule extends Rule_1.Rule {
    constructor(path) {
        super(path);
        this.isCodeCaretRule = false;
        this.pathArray = [];
    }
    get constructorName() {
        return 'CaretValueRule';
    }
    toFSH() {
        var _a;
        let value;
        if (this.value instanceof FshCanonical_1.FshCanonical ||
            this.value instanceof FshCode_1.FshCode ||
            this.value instanceof FshQuantity_1.FshQuantity ||
            this.value instanceof FshRatio_1.FshRatio ||
            this.value instanceof FshReference_1.FshReference) {
            value = this.value.toString();
        }
        else if (typeof this.value === 'boolean' ||
            typeof this.value === 'number' ||
            typeof this.value === 'bigint') {
            value = (_a = this.rawValue) !== null && _a !== void 0 ? _a : String(this.value);
        }
        else if (typeof this.value === 'string') {
            value = this.isInstance ? this.value : `"${(0, common_1.fshifyString)(this.value)}"`;
        }
        else if (this.value) {
            value = this.value._instanceMeta.name;
        }
        let printablePath;
        if (this.isCodeCaretRule) {
            if (this.pathArray.length) {
                printablePath =
                    this.pathArray
                        .map(code => {
                        const splitCode = code.split('#');
                        const systemPart = splitCode[0];
                        const codePart = splitCode.slice(1).join('#');
                        if (/^"|\s/.test(codePart)) {
                            return `${systemPart}#"${(0, common_1.fshifyString)(codePart)}"`;
                        }
                        else {
                            return `${systemPart}#${codePart}`;
                        }
                    })
                        .join(' ') + ' ';
            }
            else {
                printablePath = '';
            }
        }
        else {
            printablePath = this.path !== '' ? this.path + ' ' : '';
        }
        return `* ${printablePath}^${this.caretPath} = ${value}`;
    }
}
exports.CaretValueRule = CaretValueRule;
//# sourceMappingURL=CaretValueRule.js.map