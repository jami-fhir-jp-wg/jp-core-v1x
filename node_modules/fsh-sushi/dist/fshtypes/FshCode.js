"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FshCode = void 0;
const FshEntity_1 = require("./FshEntity");
const common_1 = require("./common");
class FshCode extends FshEntity_1.FshEntity {
    constructor(code, system, display) {
        super();
        this.code = code;
        this.system = system;
        this.display = display;
    }
    toString() {
        var _a;
        let codeToShow = this.code;
        if (/^"|\s/.test(this.code)) {
            codeToShow = `"${(0, common_1.fshifyString)(this.code)}"`;
        }
        const str = `${(_a = this.system) !== null && _a !== void 0 ? _a : ''}#${codeToShow}`;
        return this.display ? `${str} "${(0, common_1.fshifyString)(this.display)}"` : str;
    }
    toFHIRCoding() {
        const coding = {};
        if (this.code) {
            coding.code = this.code;
        }
        if (this.system) {
            if (this.system.indexOf('|') > -1) {
                let versionParts;
                [coding.system, ...versionParts] = this.system.split('|');
                coding.version = versionParts.join('|');
            }
            else {
                coding.system = this.system;
            }
        }
        if (this.display) {
            coding.display = this.display;
        }
        return coding;
    }
    toFHIRCodeableConcept() {
        return {
            coding: [this.toFHIRCoding()]
        };
    }
    toFHIRQuantity() {
        const quantity = {};
        if (this.code) {
            quantity.code = this.code;
        }
        if (this.system) {
            quantity.system = this.system;
        }
        if (this.display) {
            quantity.unit = this.display;
        }
        return quantity;
    }
}
exports.FshCode = FshCode;
//# sourceMappingURL=FshCode.js.map