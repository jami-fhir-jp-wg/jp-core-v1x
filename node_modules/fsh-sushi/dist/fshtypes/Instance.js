"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = void 0;
const FshEntity_1 = require("./FshEntity");
const os_1 = require("os");
const common_1 = require("./common");
class Instance extends FshEntity_1.FshEntity {
    constructor(name) {
        super();
        this.name = name;
        this.id = name; // init same as name
        this.rules = [];
        this.usage = 'Example'; // init to Example (default)
    }
    get constructorName() {
        return 'Instance';
    }
    get id() {
        const assignedId = (0, common_1.getNonInstanceValueFromRules)(this, 'id', '', 'id');
        if (typeof assignedId === 'string') {
            return assignedId;
        }
        return this._id;
    }
    set id(id) {
        this._id = id;
    }
    metadataToFSH() {
        const resultLines = [];
        resultLines.push(`Instance: ${this.name}`);
        resultLines.push(`InstanceOf: ${this.instanceOf}`);
        if (this.title) {
            resultLines.push(`Title: "${(0, common_1.fshifyString)(this.title)}"`);
        }
        if (this.description) {
            // Description can be a multiline string.
            // If it contains newline characters, treat it as a multiline string.
            if (this.description.indexOf('\n') > -1) {
                resultLines.push(`Description: """${this.description}"""`);
            }
            else {
                resultLines.push(`Description: "${(0, common_1.fshifyString)(this.description)}"`);
            }
        }
        if (this.usage) {
            resultLines.push(`Usage: #${this.usage.toLowerCase()}`);
        }
        return resultLines.join(os_1.EOL);
    }
    toFSH() {
        const metadataFSH = this.metadataToFSH();
        const rulesFSH = this.rules.map(r => r.toFSH()).join(os_1.EOL);
        return `${metadataFSH}${rulesFSH.length ? os_1.EOL + rulesFSH : ''}`;
    }
}
exports.Instance = Instance;
//# sourceMappingURL=Instance.js.map