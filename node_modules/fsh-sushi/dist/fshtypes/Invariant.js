"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Invariant = void 0;
const FshEntity_1 = require("./FshEntity");
const os_1 = require("os");
const common_1 = require("./common");
/**
 * The Invariant class is used to represent the "constraint" field on ElementDefinition
 * Invariant fields map to their corresponding field on "constraint" except:
 * description -> constraint.human
 * name -> constraint.key
 * @see {@link https://www.hl7.org/fhir/elementdefinition.html}
 */
class Invariant extends FshEntity_1.FshEntity {
    constructor(name) {
        super();
        this.name = name;
        this.rules = [];
    }
    get constructorName() {
        return 'Invariant';
    }
    /**
     * Read only property for id that just returns the name of the invariant
     * This was added so that all types that are returned by FSHTank.fish have an id that can be accessed
     */
    get id() {
        return this.name;
    }
    metadataToFSH() {
        const resultLines = [];
        resultLines.push(`Invariant: ${this.name}`);
        if (this.description) {
            // Description can be a multiline string.
            // If it contains newline characters, treat it as a multiline string.
            if (this.description.indexOf('\n') > -1) {
                resultLines.push(`Description: """${this.description}"""`);
            }
            else {
                resultLines.push(`Description: "${(0, common_1.fshifyString)(this.description)}"`);
            }
        }
        if (this.severity) {
            resultLines.push(`* severity = ${this.severity}`);
        }
        if (this.expression) {
            resultLines.push(`* expression = "${(0, common_1.fshifyString)(this.expression)}"`);
        }
        if (this.xpath) {
            resultLines.push(`* xpath = "${(0, common_1.fshifyString)(this.xpath)}"`);
        }
        return resultLines.join(os_1.EOL);
    }
    toFSH() {
        const metadataFSH = this.metadataToFSH();
        const rulesFSH = this.rules.map(r => r.toFSH()).join(os_1.EOL);
        return `${metadataFSH}${rulesFSH.length ? os_1.EOL + rulesFSH : ''}`;
    }
}
exports.Invariant = Invariant;
//# sourceMappingURL=Invariant.js.map