import { Extension } from './Extension';
import { FshCodeSystem } from './FshCodeSystem';
import { FshValueSet } from './FshValueSet';
import { Instance } from './Instance';
import { Logical } from './Logical';
import { Mapping } from './Mapping';
import { Profile } from './Profile';
import { Resource } from './Resource';
import { RuleSet } from './RuleSet';
import { CaretValueRule, OnlyRuleType, AssignmentRule } from './rules';
export declare function typeString(types: OnlyRuleType[]): string;
export declare function fshifyString(input: string): string;
export declare function findAssignmentByPath(fshDefinition: Profile | Extension | Logical | Resource | FshValueSet | FshCodeSystem | Instance | RuleSet | Mapping, assignmentRulePath: string, caretRulePath: string, caretRuleCaretPath: string): CaretValueRule | AssignmentRule;
/**
 * A helper function used to determine the value of either an assignment rule or a caret value rule
 * @param fshDefinition  the FSH definition
 * @param assignmentRulePath the path of the assignment rule whose value we want
 * @param caretRulePath the path of the caret value rule whose value we want
 * @param caretRuleCaretPath the caret path of the caret value rule
 * @returns an object with the value set by either the assignment rule or the caret value rule, and whether or not the value represents an instance,
 * or undefined if neither rule is set on the definition
 */
export declare function getValueFromRules(fshDefinition: Profile | Extension | Logical | Resource | FshValueSet | FshCodeSystem | Instance | RuleSet | Mapping, assignmentRulePath: string, caretRulePath: string, caretRuleCaretPath: string): {
    value: import("./rules").AssignmentValueType;
    isInstance: boolean;
};
export declare function getNonInstanceValueFromRules(fshDefinition: Profile | Extension | Logical | Resource | FshValueSet | FshCodeSystem | Instance | RuleSet | Mapping, assignmentRulePath: string, caretRulePath: string, caretRuleCaretPath: string): import("./rules").AssignmentValueType;
